[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 parsel authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Till Tietz. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tietz T (2023). parsel: Parallel Dynamic Web-Scraping Using 'RSelenium'. R package version 0.3.0, https://github.com/till-tietz/parsel.","code":"@Manual{,   title = {parsel: Parallel Dynamic Web-Scraping Using 'RSelenium'},   author = {Till Tietz},   year = {2023},   note = {R package version 0.3.0},   url = {https://github.com/till-tietz/parsel}, }"},{"path":"/index.html","id":"parsel","dir":"","previous_headings":"","what":"Parallel Dynamic Web-Scraping Using RSelenium","title":"Parallel Dynamic Web-Scraping Using RSelenium","text":"parsel framework parallelized dynamic web-scraping using RSelenium. Leveraging parallel processing, allows run RSelenium web-scraping routine multiple browser instances simultaneously, thus greatly increasing efficiency scraping. parsel utilizes chunked input processing well error catching logging, ensure seamless execution scraping routine minimal data loss, even presence unforeseen RSelenium errors. parsel additionally provides convenient wrapper functions around RSelenium methods, allow quickly generate safe scraping code minimal coding end.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parallel Dynamic Web-Scraping Using RSelenium","text":"","code":"# Install parsel from CRAN install.packages(\"parsel\")  # Or the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"till-tietz/parsel\")"},{"path":[]},{"path":"/index.html","id":"parallel-scraping","dir":"","previous_headings":"Usage","what":"Parallel Scraping","title":"Parallel Dynamic Web-Scraping Using RSelenium","text":"following example hopefully serve illustrate functionality ideas behind parsel operates. ’ll set following scraping job: navigate random Wikipedia article retrieve title navigate first linked page article retrieve linked page’s title first section parallelize parsel. parsel requires two things: scraping function defining actions executed RSelenium instance. Actions executed browser instance written conventional RSelenium syntax remDr$ specifying remote driver. input x actions (e.g. search terms entered search boxes links navigate etc.) Now scrape function input can parallelize execution function. speed efficiency reasons, advisable specify headless browser option extraCapabilities argument. parscrape show progress bar, well elapsed estimated remaining time can keep track scraping progress. parscrape returns list two elements: list scrape function output data.frame inputs unable scrape, associated error messages","code":"library(RSelenium) library(parsel)  #let's define our scraping function input  #we want to run our function 4 times and we want it to start on the wikipedia main page each time  input <- rep(\"https://de.wikipedia.org\",4)  #let's define our scraping function   get_wiki_text <- function(x){   input_i <- x      #navigate to input page (i.e wikipedia)   remDr$navigate(input_i)      #find and click random article    rand_art <- remDr$findElement(using = \"id\", \"n-randompage\")$clickElement()      #get random article title    title <- remDr$findElement(using = \"id\", \"firstHeading\")$getElementText()[[1]]      #check if there is a linked page   link_exists <- try(remDr$findElement(using = \"xpath\", \"/html/body/div[3]/div[3]/div[5]/div[1]/p[1]/a[1]\"))      #if no linked page fill output with NA   if(is(link_exists,\"try-error\")){     first_link_title <- NA     first_link_text <- NA          #if there is a linked page   } else {     #click on link     link <- remDr$findElement(using = \"xpath\", \"/html/body/div[3]/div[3]/div[5]/div[1]/p[1]/a[1]\")$clickElement()          #get link page title     first_link_title <- try(remDr$findElement(using = \"id\", \"firstHeading\"))     if(is(first_link_title,\"try-error\")){       first_link_title <- NA     }else{       first_link_title <- first_link_title$getElementText()[[1]]     }          #get 1st section of link page     first_link_text <- try(remDr$findElement(using = \"xpath\", \"/html/body/div[3]/div[3]/div[5]/div[1]/p[1]\"))     if(is(first_link_text,\"try-error\")){       first_link_text <- NA     }else{       first_link_text <- first_link_text$getElementText()[[1]]     }   }   out <- data.frame(\"random_article\" = title,                     \"first_link_title\" = first_link_title,                     \"first_link_text\" = first_link_text)   return(out) } wiki_text <- parsel::parscrape(scrape_fun = get_wiki_text,                                scrape_input = input,                                cores = 2,                                packages = c(\"RSelenium\",\"XML\"),                                browser = \"firefox\",                                scrape_tries = 1,                                extraCapabilities = list(                                      \"moz:firefoxOptions\" = list(args = list('--headless'))                                      ))"},{"path":"/index.html","id":"rselenium-constructors","dir":"","previous_headings":"Usage","what":"RSelenium Constructors","title":"Parallel Dynamic Web-Scraping Using RSelenium","text":"parsel allows generate safe scraping code minimal hassle simply composing constructor functions effectively act wrappers around RSelenium methods pipe. can return scraper function defined constructors environment starting pipe start_scraper() ending build_scraper(). Alternatively can dump code generated constructor pipe console via show(). ’ll reproduce slightly stripped version RSelenium code wikipedia scraping routine via parsel constructor functions.","code":"library(parsel)  # returning a scaper function  start_scraper(args = \"x\", name = \"get_wiki_text\") %>>%   go(url = \"x\") %>>%    click(using = \"id\", value = \"'n-randompage'\", name = \"rand_art\") %>>%   get_element(using = \"id\", value = \"'firstHeading'\", name = \"title\") %>>%   click(using = \"xpath\", value = \"'/html/body/div[3]/div[3]/div[5]/div[1]/p[1]/a[1]'\", name = \"link\") %>>%   get_element(using = \"id\", value = \"'firstHeading'\", name = \"first_link_title\") %>>%   get_element(using = \"xpath\", value = \"'/html/body/div[3]/div[3]/div[5]/div[1]/p[1]'\", name = \"first_link_text\") %>>%   build_scraper() #> [1] \"scraping function get_wiki_text constructed and in environment\" #> [1] \"scraping function get_wiki_text constructed and in environment\"  ls()   #> [1] \"get_wiki_text\"  # dumping generated code to console  go(url = \"x\") %>>%   click(using = \"id\", value = \"'n-randompage'\", name = \"rand_art\") %>>%   get_element(using = \"id\", value = \"'firstHeading'\", name = \"title\") %>>%   click(using = \"xpath\", value = \"'/html/body/div[3]/div[3]/div[5]/div[1]/p[1]/a[1]'\", name = \"link\") %>>%   get_element(using = \"id\", value = \"'firstHeading'\", name = \"first_link_title\") %>>%   get_element(using = \"xpath\", value = \"'/html/body/div[3]/div[3]/div[5]/div[1]/p[1]'\", name = \"first_link_text\") %>>%   show() #> # navigate to url #> not_loaded <- TRUE #> remDr$navigate(x) #> while(not_loaded){ #> Sys.sleep(0.25) #> current <- remDr$getCurrentUrl()[[1]] #> if(current == x){ #> not_loaded <- FALSE #> } #> }  #>   #>  rand_art <- remDr$findElement(using = 'id', 'n-randompage') #> rand_art$clickElement() #> Sys.sleep(0.25)  #>   #>  title <- try(remDr$findElement(using = 'id', 'firstHeading'))  #> if(is(title,'try-error')){  #> title <- NA  #> } else {  #> title <- title$getElementText()[[1]]  #> }  #>   #>  link <- remDr$findElement(using = 'xpath', '/html/body/div[3]/div[3]/div[5]/div[1]/p[1]/a[1]') #> link$clickElement() #> Sys.sleep(0.25)  #>   #>  first_link_title <- try(remDr$findElement(using = 'id', 'firstHeading'))  #> if(is(first_link_title,'try-error')){  #> first_link_title <- NA  #> } else {  #> first_link_title <- first_link_title$getElementText()[[1]]  #> }  #>   #>  first_link_text <- try(remDr$findElement(using = 'xpath', '/html/body/div[3]/div[3]/div[5]/div[1]/p[1]'))  #> if(is(first_link_text,'try-error')){  #> first_link_text <- NA  #> } else {  #> first_link_text <- first_link_text$getElementText()[[1]]  #> }"},{"path":"/reference/build_scraper.html","id":null,"dir":"Reference","previous_headings":"","what":"generates the scraping function defined by start_scraper and other constructors in your environment — build_scraper","title":"generates the scraping function defined by start_scraper and other constructors in your environment — build_scraper","text":"generates scraping function defined start_scraper constructors environment","code":""},{"path":"/reference/build_scraper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generates the scraping function defined by start_scraper and other constructors in your environment — build_scraper","text":"","code":"build_scraper(prev = NULL)"},{"path":"/reference/build_scraper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generates the scraping function defined by start_scraper and other constructors in your environment — build_scraper","text":"prev placeholder output functions piped show(). Defaults NULL altered.","code":""},{"path":"/reference/build_scraper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generates the scraping function defined by start_scraper and other constructors in your environment — build_scraper","text":"function","code":""},{"path":"/reference/build_scraper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generates the scraping function defined by start_scraper and other constructors in your environment — build_scraper","text":"","code":"if (FALSE) {  start_scraper(args = c(\"x\"), name = \"fun\") %>>% go(\"x\") %>>% build_scraper()   }"},{"path":"/reference/click.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around clickElement() method to generate safe scraping code — click","title":"wrapper around clickElement() method to generate safe scraping code — click","text":"wrapper around clickElement() method generate safe scraping code","code":""},{"path":"/reference/click.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around clickElement() method to generate safe scraping code — click","text":"","code":"click(using, value, name = NULL, new_page = FALSE, prev = NULL)"},{"path":"/reference/click.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around clickElement() method to generate safe scraping code — click","text":"using character string specifying locator scheme use search elements. Available schemes: \"class name\", \"css selector\", \"id\", \"name\", \"link text\", \"partial link text\", \"tag name\", \"xpath\". value character string specifying search target. name character string specifying object name RSelenium \"wElement\" class object saved . new_page logical indicating clickElement() action result change url. prev placeholder output functions piped click(). Defaults NULL altered.","code":""},{"path":"/reference/click.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around clickElement() method to generate safe scraping code — click","text":"character string defining 'RSelenium' clicking instructions can pasted scraping function.","code":""},{"path":"/reference/click.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper around clickElement() method to generate safe scraping code — click","text":"","code":"if (FALSE) {  #navigate to wikipedia, click random article  parsel::go(\"https://www.wikipedia.org/\") %>>% parsel::click(using = \"id\", value = \"'n-randompage'\") %>>% show()  }"},{"path":"/reference/close_rselenium.html","id":null,"dir":"Reference","previous_headings":"","what":"utility function that closes all parallel instances of RSelenium — close_rselenium","title":"utility function that closes all parallel instances of RSelenium — close_rselenium","text":"utility function closes parallel instances RSelenium","code":""},{"path":"/reference/close_rselenium.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility function that closes all parallel instances of RSelenium — close_rselenium","text":"","code":"close_rselenium(clust)"},{"path":"/reference/close_rselenium.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility function that closes all parallel instances of RSelenium — close_rselenium","text":"clust parallel cluster","code":""},{"path":"/reference/close_rselenium.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility function that closes all parallel instances of RSelenium — close_rselenium","text":"return value, called close RSelenium instances parscrape.","code":""},{"path":"/reference/gen_varname.html","id":null,"dir":"Reference","previous_headings":"","what":"utility function to check for repeated and generate unique variable names — gen_varname","title":"utility function to check for repeated and generate unique variable names — gen_varname","text":"utility function check repeated generate unique variable names","code":""},{"path":"/reference/gen_varname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utility function to check for repeated and generate unique variable names — gen_varname","text":"","code":"gen_varname(input)"},{"path":"/reference/gen_varname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utility function to check for repeated and generate unique variable names — gen_varname","text":"input character string","code":""},{"path":"/reference/gen_varname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utility function to check for repeated and generate unique variable names — gen_varname","text":"generated variable name character string","code":""},{"path":"/reference/get_element.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around getElementText() method to generate safe scraping code — get_element","title":"wrapper around getElementText() method to generate safe scraping code — get_element","text":"wrapper around getElementText() method generate safe scraping code","code":""},{"path":"/reference/get_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around getElementText() method to generate safe scraping code — get_element","text":"","code":"get_element(using, value, name = NULL, multiple = FALSE, prev = NULL)"},{"path":"/reference/get_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around getElementText() method to generate safe scraping code — get_element","text":"using character string specifying locator scheme use search elements. Available schemes: \"class name\", \"css selector\", \"id\", \"name\", \"link text\", \"partial link text\", \"tag name\", \"xpath\". value character string specifying search target. name character string specifying object name RSelenium \"wElement\" class object saved . NULL name generated automatically. multiple logical indicating whether multiple elements returned. TRUE findElements() method invoked. prev placeholder output functions piped get_element(). Defaults NULL altered.","code":""},{"path":"/reference/get_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around getElementText() method to generate safe scraping code — get_element","text":"character string defining 'RSelenium' getElementText() instructions can pasted scraping function.","code":""},{"path":"/reference/get_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper around getElementText() method to generate safe scraping code — get_element","text":"","code":"if (FALSE) {  #navigate to wikipedia, type \"Hello\" into the search box, #press enter, get page header  parsel::go(\"https://www.wikipedia.org/\") %>>% parsel::type(using = \"id\",              value = \"'searchInput'\",              name = \"searchbox\",              text = c(\"Hello\",\"\\uE007\")) %>>% parsel::get_element(using = \"id\",                     value = \"'firstHeading'\",                     name = \"header\") %>>%             show()  #navigate to wikipedia, type \"Hello\" into the search box, press enter, #get page header, save in external data.frame x.  parsel::go(\"https://www.wikipedia.org/\") %>>% parsel::type(using = \"id\",              value = \"'searchInput'\",              name = \"searchbox\",              text = c(\"Hello\",\"\\uE007\")) %>>% parsel::get_element(using = \"id\",                     value = \"'firstHeading'\",                     name = \"x[,1]\") %>>%                     show()  }"},{"path":"/reference/go.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around remDr$navigate method to generate safe navigation code — go","title":"wrapper around remDr$navigate method to generate safe navigation code — go","text":"wrapper around remDr$navigate method generate safe navigation code","code":""},{"path":"/reference/go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around remDr$navigate method to generate safe navigation code — go","text":"","code":"go(url, prev = NULL)"},{"path":"/reference/go.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around remDr$navigate method to generate safe navigation code — go","text":"url character string specifying name object holding url string url string function navigate . prev placeholder output functions piped go(). Defaults NULL altered.","code":""},{"path":"/reference/go.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around remDr$navigate method to generate safe navigation code — go","text":"character string defining 'RSelenium' navigation instructions can pasted scraping function","code":""},{"path":"/reference/go.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper around remDr$navigate method to generate safe navigation code — go","text":"","code":"if (FALSE) {  go(\"https://www.wikipedia.org/\") %>>% show()  }"},{"path":"/reference/goback.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around remDr$goBack method to generate safe backwards navigation code — goback","title":"wrapper around remDr$goBack method to generate safe backwards navigation code — goback","text":"wrapper around remDr$goBack method generate safe backwards navigation code","code":""},{"path":"/reference/goback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around remDr$goBack method to generate safe backwards navigation code — goback","text":"","code":"goback(prev = NULL)"},{"path":"/reference/goback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around remDr$goBack method to generate safe backwards navigation code — goback","text":"prev placeholder output functions piped goback(). Defaults NULL altered.","code":""},{"path":"/reference/goback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around remDr$goBack method to generate safe backwards navigation code — goback","text":"character string defining 'RSelenium' backwards navigation instructions can pasted scraping function","code":""},{"path":"/reference/goback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper around remDr$goBack method to generate safe backwards navigation code — goback","text":"","code":"if (FALSE) {  goback() %>>% show()  }"},{"path":"/reference/goforward.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around remDr$goForward method to generate safe forwards navigation code — goforward","title":"wrapper around remDr$goForward method to generate safe forwards navigation code — goforward","text":"wrapper around remDr$goForward method generate safe forwards navigation code","code":""},{"path":"/reference/goforward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around remDr$goForward method to generate safe forwards navigation code — goforward","text":"","code":"goforward(prev = NULL)"},{"path":"/reference/goforward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around remDr$goForward method to generate safe forwards navigation code — goforward","text":"prev placeholder output functions piped goforward(). Defaults NULL altered.","code":""},{"path":"/reference/goforward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around remDr$goForward method to generate safe forwards navigation code — goforward","text":"character string defining 'RSelenium' forward navigation instructions can pasted scraping function.","code":""},{"path":"/reference/goforward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper around remDr$goForward method to generate safe forwards navigation code — goforward","text":"","code":"if (FALSE) {  goforward() %>>% show()  }"},{"path":"/reference/grapes-greater-than-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"pipe-like operator that passes the output of lhs to the prev argument of rhs to paste together a scraper function in sequence. — %>>%","title":"pipe-like operator that passes the output of lhs to the prev argument of rhs to paste together a scraper function in sequence. — %>>%","text":"pipe-like operator passes output lhs prev argument rhs paste together scraper function sequence.","code":""},{"path":"/reference/grapes-greater-than-greater-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pipe-like operator that passes the output of lhs to the prev argument of rhs to paste together a scraper function in sequence. — %>>%","text":"","code":"lhs %>>% rhs"},{"path":"/reference/grapes-greater-than-greater-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pipe-like operator that passes the output of lhs to the prev argument of rhs to paste together a scraper function in sequence. — %>>%","text":"lhs parsel constructor function call rhs parsel constructor function call accept lhs prev argument","code":""},{"path":"/reference/grapes-greater-than-greater-than-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pipe-like operator that passes the output of lhs to the prev argument of rhs to paste together a scraper function in sequence. — %>>%","text":"output rhs evaluated lhs prev argument","code":""},{"path":"/reference/grapes-greater-than-greater-than-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pipe-like operator that passes the output of lhs to the prev argument of rhs to paste together a scraper function in sequence. — %>>%","text":"","code":"if (FALSE) {  #paste together the go and goback output in sequence go(\"https://www.wikipedia.org/\") %>>% goback()  }"},{"path":"/reference/parscrape.html","id":null,"dir":"Reference","previous_headings":"","what":"parallelize execution of RSelenium — parscrape","title":"parallelize execution of RSelenium — parscrape","text":"parallelize execution RSelenium","code":""},{"path":"/reference/parscrape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parallelize execution of RSelenium — parscrape","text":"","code":"parscrape(   scrape_fun,   scrape_input,   cores = NULL,   packages = c(\"base\"),   browser,   ports = NULL,   chunk_size = NULL,   scrape_tries = 1,   proxy = NULL,   extraCapabilities = list() )"},{"path":"/reference/parscrape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parallelize execution of RSelenium — parscrape","text":"scrape_fun function input x sending instructions remDr (remote driver)/ scraping function parallelized scrape_input data frame, list, vector element input passed scrape_fun cores number cores run RSelenium instances . Defaults available cores - 1. packages character vector package names packages used scrape_fun browser character vector specifying browser used ports vector ports RSelenium instances. left default NULL parscrape randomly generate ports. chunk_size number scrape_input elements processed per round scrape_fun. parscrape splits scrape_input chunks runs scrape_fun multiple rounds avoid loosing data due errors. Defaults number cores. scrape_tries number times parscrape re-try scrape chunk encountering error proxy proxy setting function runs scraping chunk extraCapabilities list extraCapabilities options passed rsDriver","code":""},{"path":"/reference/parscrape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parallelize execution of RSelenium — parscrape","text":"list containing elements: scraped_results not_scraped. scraped_results list containing output scrape_fun. unscraped input elements not_scraped NULL. unscraped elements not_scraped data.frame containing scrape_input id, chunk id associated error unscraped input elements.","code":""},{"path":"/reference/parscrape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"parallelize execution of RSelenium — parscrape","text":"","code":"if (FALSE) { input <- c(\".central-textlogo__image\",\".central-textlogo__image\")  scrape_fun <- function(x){  input_i <- x  remDr$navigate(\"https://www.wikipedia.org/\")  element <- remDr$findElement(using = \"css\", input_i)  element <- element$getElementText()  return(element) }  parsel_out <- parscrape(scrape_fun = scrape_fun,                        scrape_input = input,                        cores = 2,                        packages = c(\"RSelenium\"),                        browser = \"firefox\",                        scrape_tries = 1,                        chunk_size = 2,                        extraCapabilities = list(                         \"moz:firefoxOptions\" = list(args = list('--headless'))                         )                        ) }"},{"path":"/reference/parsel-package.html","id":null,"dir":"Reference","previous_headings":"","what":"parsel: Parallel Dynamic Web-Scraping Using 'RSelenium' — parsel-package","title":"parsel: Parallel Dynamic Web-Scraping Using 'RSelenium' — parsel-package","text":"system increase efficiency dynamic web-scraping 'RSelenium' leveraging parallel processing. provide function wrapper 'RSelenium' scraping routine set inputs, 'parsel' runs several browser instances. Chunked input processing well error catching logging ensures seamless execution minimal data loss, even unforeseen 'RSelenium' errors occur. can additionally build safe scraping functions minimal coding utilizing constructor functions act wrappers around 'RSelenium' methods.","code":""},{"path":[]},{"path":"/reference/parsel-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"parsel: Parallel Dynamic Web-Scraping Using 'RSelenium' — parsel-package","text":"Maintainer: Till Tietz ttietz2014@gmail.com","code":""},{"path":"/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"renders the output of the piped functions to the console via cat() — show","title":"renders the output of the piped functions to the console via cat() — show","text":"renders output piped functions console via cat()","code":""},{"path":"/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"renders the output of the piped functions to the console via cat() — show","text":"","code":"show(prev = NULL)"},{"path":"/reference/show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"renders the output of the piped functions to the console via cat() — show","text":"prev placeholder output functions piped show(). Defaults NULL altered.","code":""},{"path":"/reference/show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"renders the output of the piped functions to the console via cat() — show","text":"None (invisible NULL)","code":""},{"path":"/reference/show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"renders the output of the piped functions to the console via cat() — show","text":"","code":"if (FALSE) {  go(\"https://www.wikipedia.org/\") %>>% goback() %>>% show()  }"},{"path":"/reference/start_scraper.html","id":null,"dir":"Reference","previous_headings":"","what":"sets function name and arguments of scraping function — start_scraper","title":"sets function name and arguments of scraping function — start_scraper","text":"sets function name arguments scraping function","code":""},{"path":"/reference/start_scraper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sets function name and arguments of scraping function — start_scraper","text":"","code":"start_scraper(args, name = NULL)"},{"path":"/reference/start_scraper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sets function name and arguments of scraping function — start_scraper","text":"args character vector function arguments name character string specifying object name scraping function. NULL defaults 'scraper'","code":""},{"path":"/reference/start_scraper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sets function name and arguments of scraping function — start_scraper","text":"character string starting function definition","code":""},{"path":"/reference/start_scraper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sets function name and arguments of scraping function — start_scraper","text":"","code":"if (FALSE) {  start_scraper(args = c(\"x\",\"y\"), name = \"fun\")  }"},{"path":"/reference/type.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around sendKeysToElement() method to generate safe scraping code — type","title":"wrapper around sendKeysToElement() method to generate safe scraping code — type","text":"wrapper around sendKeysToElement() method generate safe scraping code","code":""},{"path":"/reference/type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around sendKeysToElement() method to generate safe scraping code — type","text":"","code":"type(   using,   value,   name = NULL,   text,   text_object,   new_page = FALSE,   prev = NULL )"},{"path":"/reference/type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around sendKeysToElement() method to generate safe scraping code — type","text":"using character string specifying locator scheme use search elements. Available schemes: \"class name\", \"css selector\", \"id\", \"name\", \"link text\", \"partial link text\", \"tag name\", \"xpath\". value character string specifying search target. name character string specifying object name RSelenium \"wElement\" class object saved .NULL name generated automatically. text character vector specifying text typed. text_object character string specifying name external object holding text typed. Note remDr$sendKeysToElement method accepts list inputs. new_page logical indicating sendKeysToElement() action result change url. prev placeholder output functions piped type(). Defaults NULL altered.","code":""},{"path":"/reference/type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around sendKeysToElement() method to generate safe scraping code — type","text":"character string defining 'RSelenium' typing instructions can pasted scraping function.","code":""},{"path":"/reference/type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper around sendKeysToElement() method to generate safe scraping code — type","text":"","code":"if (FALSE) {  #navigate to wikipedia, type \"Hello\" into the search box,  press enter  parsel::go(\"https://www.wikipedia.org/\") %>>% parsel::type(using = \"id\",              value = \"'searchInput'\",              name = \"searchbox\",              text = c(\"Hello\",\"\\uE007\")) %>>%              show()  #navigate to wikipeda, type content stored in external object \"x\" into search box  parsel::go(\"https://www.wikipedia.org/\") %>>% parsel::type(using = \"id\",              value = \"'searchInput'\",              name = \"searchbox\",              text_object = \"x\") %>>%              show()  }"},{"path":"/news/index.html","id":"parsel-030","dir":"Changelog","previous_headings":"","what":"parsel 0.3.0","title":"parsel 0.3.0","text":"CRAN release: 2023-02-22 Added start_scraper build_scraper functions, jointly allow users turn scraper functionality defined parsel constructors scraping functions. Scraping code can now dumped console via show returned environment function.","code":""},{"path":"/news/index.html","id":"parsel-021","dir":"Changelog","previous_headings":"","what":"parsel 0.2.1","title":"parsel 0.2.1","text":"CRAN release: 2022-08-16 fixed parscrape row number mismatch bug construction unscraped data.frame chunks contain different numbers scrape elements.","code":""},{"path":"/news/index.html","id":"parsel-020","dir":"Changelog","previous_headings":"","what":"parsel 0.2.0","title":"parsel 0.2.0","text":"CRAN release: 2022-06-08 Added ‘RSelenium’ constructor functions. functions wrappers around ‘RSelenium’ methods allow quickly easily render safe, ready use ‘RSelenium’ scraping code console paste scraping functions. Constructors can piped together via %>>% allow intuitive, sequential construction scraping code.","code":""},{"path":"/news/index.html","id":"parsel-010","dir":"Changelog","previous_headings":"","what":"parsel 0.1.0","title":"parsel 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
